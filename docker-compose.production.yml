services:
  app:
    build:
      context: .
      target: production
    image: ${APP_IMAGE_NAME}
    environment:
      APP_NODE_ENV: "${APP_NODE_ENV}"
      APP_PORT: "${APP_PORT}"
      APP_HOST: "${APP_HOST}"
      APP_DRIVE_PATH: "${APP_DRIVE_PATH}"

      DATABASE_URL: "postgresql://${DB_USER}:${DB_PASSWORD}@db:${DB_PORT}/${DB_NAME}"

      JWT_SECRET: "${JWT_SECRET}"
      EXAMPLE_MESSAGE: "${EXAMPLE_MESSAGE}"
    deploy:
      mode: replicated
      replicas: 3
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://app:${APP_PORT}/api/v1/example/hello || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    command: >
      sh -c "
        npm run migrate:deploy &&
        npm run start:prod
      "

  db:
    image: ${DB_IMAGE_NAME}
    container_name: ${DB_CONTAINER_NAME}
    restart: always
    ports:
      - "${DB_PORT}:${DB_PORT}"
    environment:
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
      POSTGRES_DB: "${DB_NAME}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -h localhost -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pg_data:/var/lib/postgresql/data

  nginx:
    image: nginx:latest
    container_name: app-nginx
    ports:
      - "${APP_PORT}:80"
    volumes:
      - ./infrastructure/nginx.conf:/etc/nginx/nginx.conf:ro
      - app_drive:/usr/share/nginx/html:ro
    depends_on:
      app:
        condition: service_healthy

volumes:
  app_drive:
  pg_data:
